"""
Read a measurements file generated by eval_limesdr_fpga.py
and plots the PER/SNR curve, plus CFO values.
"""

import sys
from collections import defaultdict

import matplotlib.pyplot as plt
import numpy as np
import pandas as pd

if __name__ == "__main__":
    expected_payload = np.arange(100, dtype=np.uint8)
    num_bits = len(expected_payload) * 8

    # from -30 to 15 dB
    files = ["Measures/1000_-30dB.txt", "Measures/1000_-25dB.txt", "Measures/1000_-20dB.txt", "Measures/1000_-15dB.txt", "Measures/1000_-10dB.txt", "Measures/1000_-5dB.txt", "Measures/1000_-0dB.txt", "Measures/1000_5dB.txt", "Measures/1000_10dB.txt", "Measures/1000_15dB.txt"]

    # Make subplot for the 10 file
    fig, axs = plt.subplots(2, 5, figsize=(20, 10))
    fig.suptitle("CFO values for different SNR values")

    for i, file in enumerate(files):
        data = defaultdict(list)
        with open(file) as f:
            for line in f.read().splitlines():
                try:
                    if line.startswith("CFO"):
                        cfo, sto = line.split(",")
                        data["cfo"].append(float(cfo.split("=")[1]))
                        data["sto"].append(int(sto.split("=")[1]))
                    elif line.startswith("SNR"):
                        snr, txp = line.split(",")
                        data["snr"].append(float(snr.split("=")[1]))
                        data["txp"].append(int(txp.split("=")[1]))
                    elif line.startswith("packet"):
                        *_, payload = line.split(",", maxsplit=2)
                        payload = list(map(int, payload.split("=")[1][1:-1].split(",")))
                        ber = (
                            np.unpackbits(
                                expected_payload ^ np.array(payload, dtype=np.uint8)
                            ).sum()
                            / num_bits
                        )
                        invalid = 1 if ber > 0 else 0
                        data["ber"].append(ber)
                        data["invalid"].append(invalid)
                except Exception as e:
                    print(f"Erreur lors du traitement de la ligne : {line}\n{e}")
                    continue

        # Diagnostique des longueurs des colonnes
        #for key, value in data.items():
        #    print(f"{key}: {len(value)}")

        # Complétez les listes pour égaliser les longueurs
        max_len = max(len(v) for v in data.values())
        for key in data:
            while len(data[key]) < max_len:
                data[key].append(None)

        df = pd.DataFrame.from_dict(data)

        axs[i // 5, i % 5].hist(df["cfo"], bins=20)
        axs[i // 5, i % 5].set_title(f"SNR = {data['snr'][0]} dB")
    plt.show()


    # Plot PER vs. SNR
    print(df.groupby("snr").head())
    per_data = df.groupby("snr").apply(lambda x: x["invalid"].sum() / len(x)).reset_index()
    per_data.columns = ["SNR", "PER"]
   

    plt.figure(figsize=(10, 6))
    plt.plot(per_data["SNR"], per_data["PER"], marker="o", label="PER-SNR Curve")
    plt.xlabel("SNR (dB)")
    plt.ylabel("Packet Error Rate (PER)")
    plt.title("PER vs. SNR")
    plt.grid(True)
    plt.legend()
    plt.show()